<pre style="word-wrap:break-word;white-space:pre-wrap;white-space:-moz-pre-wrap;white-space:-pre-wrap;white-space:-o-pre-wrap;" >



********************* 


The Hello World project is a time-honored tradition in computer programming. It is a simple exercise that gets you started when learning something new. Let’s get started with GitHub!

You’ll learn how to:

Create and use a repository
Start and manage a new branch
Make changes to a file and push them to GitHub as commits
Open and merge a pull request

What is GitHub?
GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.

This tutorial teaches you GitHub essentials like repositories, branches, commits, and Pull Requests. You’ll create your own Hello World repository and learn GitHub’s Pull Request workflow, a popular way to create and review code.

No coding necessary
To complete this tutorial, you need a GitHub.com account and Internet access. You don’t need to know how to code, use the command line, or install Git (the version control software GitHub is built on).

Tip: Open this guide in a separate browser window (or tab) so you can see it while you complete the steps in the tutorial.


Step 1. Create a Repository
A repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets – anything your project needs. We recommend including a README, or a file with information about your project. GitHub makes it easy to add one at the same time you create your new repository. It also offers other common options such as a license file.

Your hello-world repository can be a place where you store ideas, resources, or even share and discuss things with others.

To create a new repository
In the upper right corner, next to your avatar or identicon, click  and then select New repository.
Name your repository hello-world.
Write a short description.
Select Initialize this repository with a README.
new-repo-form

Click Create repository.


Step 2. Create a Branch
Branching is the way to work on different versions of a repository at one time.

By default your repository has one branch named master which is considered to be the definitive branch. We use branches to experiment and make edits before committing them to master.

When you create a branch off the master branch, you’re making a copy, or snapshot, of master as it was at that point in time. If someone else made changes to the master branch while you were working on your branch, you could pull in those updates.

This diagram shows:

The master branch
A new branch called feature (because we’re doing ‘feature work’ on this branch)
The journey that feature takes before it’s merged into master
a branch

Have you ever saved different versions of a file? Something like:

story.txt
story-joe-edit.txt
story-joe-edit-reviewed.txt
Branches accomplish similar goals in GitHub repositories.

Here at GitHub, our developers, writers, and designers use branches for keeping bug fixes and feature work separate from our master (production) branch. When a change is ready, they merge their branch into master.

To create a new branch
Go to your new repository hello-world.
Click the drop down at the top of the file list that says branch: master.
Type a branch name, readme-edits, into the new branch text box.
Select the blue Create branch box or hit “Enter” on your keyboard.
branch gif

Now you have two branches, master and readme-edits. They look exactly the same, but not for long! Next we’ll add our changes to the new branch.


Step 3. Make and commit changes
Bravo! Now, you’re on the code view for your readme-edits branch, which is a copy of master. Let’s make some edits.

On GitHub, saved changes are called commits. Each commit has an associated commit message, which is a description explaining why a particular change was made. Commit messages capture the history of your changes, so other contributors can understand what you’ve done and why.

Make and commit changes
Click the README.md file.
Click the  pencil icon in the upper right corner of the file view to edit.
In the editor, write a bit about yourself.
Write a commit message that describes your changes.
Click Commit changes button.
commit

These changes will be made to just the README file on your readme-edits branch, so now this branch contains content that’s different from master.


Step 4. Open a Pull Request
Nice edits! Now that you have changes in a branch off of master, you can open a pull request.

Pull Requests are the heart of collaboration on GitHub. When you open a pull request, you’re proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch. Pull requests show diffs, or differences, of the content from both branches. The changes, additions, and subtractions are shown in green and red.

As soon as you make a commit, you can open a pull request and start a discussion, even before the code is finished.

By using GitHub’s @mention system in your pull request message, you can ask for feedback from specific people or teams, whether they’re down the hall or 10 time zones away.

You can even open pull requests in your own repository and merge them yourself. It’s a great way to learn the GitHub flow before working on larger projects.

Open a Pull Request for changes to the README
Click on the image for a larger version

Step	Screenshot
Click the  Pull Request tab, then from the Pull Request page, click the green New pull request button.	pr-tab
In the Example Comparisons box, select the branch you made, readme-edits, to compare with master (the original).	branch
Look over your changes in the diffs on the Compare page, make sure they’re what you want to submit.	diff
When you’re satisfied that these are the changes you want to submit, click the big green Create Pull Request button.	create-pull
Give your pull request a title and write a brief description of your changes.	pr-form
When you’re done with your message, click Create pull request!

Tip: You can use emoji and drag and drop images and gifs onto comments and Pull Requests.


Step 5. Merge your Pull Request
In this final step, it’s time to bring your changes together – merging your readme-edits branch into the master branch.

Click the green Merge pull request button to merge the changes into master.
Click Confirm merge.
Go ahead and delete the branch, since its changes have been incorporated, with the Delete branch button in the purple box.
merge delete

Celebrate!
By completing this tutorial, you’ve learned to create a project and make a pull request on GitHub!

Here’s what you accomplished in this tutorial:

Created an open source repository
Started and managed a new branch
Changed a file and committed those changes to GitHub
Opened and merged a Pull Request
Take a look at your GitHub profile and you’ll see your new contribution squares!

To learn more about the power of Pull Requests, we recommend reading the GitHub flow Guide. You might also visit GitHub Explore and get involved in an Open Source project.

Tip: Check out our other Guides, YouTube Channel and On-Demand Training for more on how to get started with GitHub.

Last updated April 7, 2016



Intro
What is GitHub?
Create a Repository
Create a Branch
Make a Commit
Open a Pull Request
Merge Pull Request


GitHub is the best way to build and ship software.
Powerful collaboration, code review, and code management for open source and private projects.


********


该的Hello World项目是计算机编程历史悠久的传统。这是一个简单的练习，可让您从中学到新知识开始。让我们开始使用GitHub！

您将学习如何：

创建和使用存储库
启动和管理新分支
更改文件并将其作为提交推送到GitHub
打开并合并拉取请求

什么是GitHub？
GitHub是用于版本控制和协作的代码托管平台。它使您和其他人可以在任何地方共同处理项目。

本教程将教您GitHub基本知识，例如存储库，分支，提交和请求请求。您将创建自己的Hello World存储库，并学习GitHub的Pull Request工作流程，这是一种创建和查看代码的流行方法。

无需编码
要完成本教程，您需要一个GitHub.com帐户和Internet访问权限。您不需要知道如何编码，使用命令行或安装Git（版本控制软件GitHub是基于GitHub构建的）。

提示：在单独的浏览器窗口（或选项卡）中打开本指南，以便在完成教程中的步骤时可以看到它。


步骤1.创建存储库
一个库通常用于举办单个项目。储存库可以包含文件夹和文件，图像，视频，电子表格和数据集-项目需要的任何内容。我们建议包括README或包含有关项目信息的文件。使用GitHub可以轻松地在创建新存储库的同时添加一个。它还提供了其他常用选项，例如许可证文件。

您的hello-world存储库可以是您存储思想，资源，甚至与他人共享和讨论事物的地方。

创建一个新的存储库
在右上角，您的头像或标识旁边，单击 然后选择“ 新建存储库”。
命名您的存储库hello-world。
写一个简短的描述。
选择使用README初始化此存储库。
新形式

单击创建存储库。


步骤2.创建一个分支
分支是一次在不同版本的存储库上工作的方式。

默认情况下，您的存储库有一个名为的分支master，该分支被视为权威分支。我们使用分支进行实验并进行修改，然后再将其提交到master。

当您在分支机构外创建分支机构时master，您将master在当时复制或快照。如果master在您处理分支时其他人对该分支进行了更改，则可以提取这些更新。

该图显示：

该master分支
一个新的分支称为feature（因为我们正在该分支上进行“功能工作”）
feature融入之前的旅程master
分店

您是否曾经保存过文件的其他版本？就像是：

story.txt
story-joe-edit.txt
story-joe-edit-reviewed.txt
分支机构在GitHub存储库中实现了相似的目标。

在GitHub，我们的开发人员，作家和设计师使用分支机构将错误修复和功能工作与master（生产）分支机构分开。更改准备就绪后，他们会将分支合并到中master。

创建一个新分支
转到新的存储库hello-world。
单击文件列表顶部的分支：master的下拉列表。
readme-edits在新的分支文本框中输入分支名称。
选择蓝色的“ 创建”分支框，或在键盘上按“ Enter”。
分支gif

现在您有两个分支，master和readme-edits。它们看起来完全一样，但时间不长！接下来，我们将更改添加到新分支。


步骤3.进行并提交更改
太棒了！现在，您在readme-edits分支的代码视图中，该视图是的副本master。让我们进行一些编辑。

在GitHub上，保存的更改称为commits。每个提交都有一个关联的提交消息，该消息是说明为什么进行特定更改的说明。提交消息记录了更改的历史记录，因此其他贡献者可以了解您所做的事情以及原因。

进行并提交更改
单击README.md文件。
点击  要编辑的文件视图右上角的铅笔图标。
在编辑器中，写一些关于您自己的信息。
编写描述您所做更改的提交消息。
单击提交更改按钮。
承诺

这些更改将仅对您readme-edits分支上的README文件进行，因此现在该分支包含的内容与有所不同master。


步骤4.打开拉取请求
不错的编辑！现在您已经在分支的分支中进行了更改master，您可以打开拉取请求。

拉取请求是GitHub上协作的核心。当您打开请求请求时，您正在提出更改，并要求某人检查并提取您的贡献并将其合并到其分支中。拉取请求显示两个分支中内容的差异或差异。更改，加法和减法以绿色和红色显示。

提交后，即使在代码完成之前，也可以打开请求请求并开始讨论。

通过在请求请求消息中使用GitHub的@mention系统，您可以要求特定人员或团队提供反馈，无论他们是在大厅还是在10个时区之外。

您甚至可以在自己的存储库中打开拉取请求，然后自己合并它们。这是在从事大型项目之前学习GitHub流程的好方法。

打开请求更改自述文件的请求
点击图像查看大图

步	屏幕截图
点击  “拉取请求”选项卡，然后从“拉取请求”页面中，单击绿色的“ 新建拉取请求”按钮。	预标签
在“ 示例比较”框中，选择readme-edits要进行比较的分支master（原始分支）。	科
在“比较”页面上的差异中查看您的更改，确保它们是您要提交的。	差异
如果您对要提交的更改感到满意，请单击绿色的大的创建请求请求按钮。	创建拉
给您的请求请求一个标题，并写下您所做更改的简短描述。	形式
完成您的消息后，单击创建请求请求！

提示：您可以使用的表情符号和拖放图片和GIF到的意见和引入请求。


步骤5.合并您的拉取请求
在最后的步骤中，是时候将您的更改集中在一起了–将readme-edits分支合并到master分支中。

点击绿色的合并拉取请求按钮，将更改合并到中master。
点击确认合并。
继续并删除分支，因为已经合并了更改，因此在紫色框中单击“ 删除分支”按钮。
合并 删除

庆祝！
通过完成本教程，您已经学会了创建项目并在GitHub上发出拉取请求！

这是您在本教程中完成的工作：

创建一个开源存储库
开始并管理一个新分支
更改了文件并将这些更改提交给GitHub
打开并合并拉取请求
查看您的GitHub个人资料，您会看到新的贡献平方！

要了解有关请求请求功能的更多信息，建议阅读GitHub flow Guide。您还可以访问GitHub Explore，并参与一个开源项目。

提示：请查看我们的其他指南，YouTube频道和按需培训，以获取有关如何开始使用GitHub的更多信息。

最后更新时间：2016年4月7日






[toc]
介绍
什么是GitHub？
创建一个仓库
创建一个分支
提交
打开拉取请求
合并拉取请求

GitHub是构建和发布软件的最佳方法。
开源和私有项目的强大协作，代码审查和代码管理。



********************* 



The Hello World project is a time-honored tradition in computer programming. It is a simple exercise that gets you started when learning something new. Let’s get started with GitHub!

You’ll learn how to:

Create and use a repository
Start and manage a new branch
Make changes to a file and push them to GitHub as commits
Open and merge a pull request

What is GitHub?
GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.

This tutorial teaches you GitHub essentials like repositories, branches, commits, and Pull Requests. You’ll create your own Hello World repository and learn GitHub’s Pull Request workflow, a popular way to create and review code.

No coding necessary
To complete this tutorial, you need a GitHub.com account and Internet access. You don’t need to know how to code, use the command line, or install Git (the version control software GitHub is built on).

Tip: Open this guide in a separate browser window (or tab) so you can see it while you complete the steps in the tutorial.


Step 1. Create a Repository
A repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets – anything your project needs. We recommend including a README, or a file with information about your project. GitHub makes it easy to add one at the same time you create your new repository. It also offers other common options such as a license file.

Your hello-world repository can be a place where you store ideas, resources, or even share and discuss things with others.

To create a new repository
In the upper right corner, next to your avatar or identicon, click  and then select New repository.
Name your repository hello-world.
Write a short description.
Select Initialize this repository with a README.
new-repo-form

Click Create repository.


Step 2. Create a Branch
Branching is the way to work on different versions of a repository at one time.

By default your repository has one branch named master which is considered to be the definitive branch. We use branches to experiment and make edits before committing them to master.

When you create a branch off the master branch, you’re making a copy, or snapshot, of master as it was at that point in time. If someone else made changes to the master branch while you were working on your branch, you could pull in those updates.

This diagram shows:

The master branch
A new branch called feature (because we’re doing ‘feature work’ on this branch)
The journey that feature takes before it’s merged into master
a branch

Have you ever saved different versions of a file? Something like:

story.txt
story-joe-edit.txt
story-joe-edit-reviewed.txt
Branches accomplish similar goals in GitHub repositories.

Here at GitHub, our developers, writers, and designers use branches for keeping bug fixes and feature work separate from our master (production) branch. When a change is ready, they merge their branch into master.

To create a new branch
Go to your new repository hello-world.
Click the drop down at the top of the file list that says branch: master.
Type a branch name, readme-edits, into the new branch text box.
Select the blue Create branch box or hit “Enter” on your keyboard.
branch gif

Now you have two branches, master and readme-edits. They look exactly the same, but not for long! Next we’ll add our changes to the new branch.


Step 3. Make and commit changes
Bravo! Now, you’re on the code view for your readme-edits branch, which is a copy of master. Let’s make some edits.

On GitHub, saved changes are called commits. Each commit has an associated commit message, which is a description explaining why a particular change was made. Commit messages capture the history of your changes, so other contributors can understand what you’ve done and why.

Make and commit changes
Click the README.md file.
Click the  pencil icon in the upper right corner of the file view to edit.
In the editor, write a bit about yourself.
Write a commit message that describes your changes.
Click Commit changes button.
commit

These changes will be made to just the README file on your readme-edits branch, so now this branch contains content that’s different from master.


Step 4. Open a Pull Request
Nice edits! Now that you have changes in a branch off of master, you can open a pull request.

Pull Requests are the heart of collaboration on GitHub. When you open a pull request, you’re proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch. Pull requests show diffs, or differences, of the content from both branches. The changes, additions, and subtractions are shown in green and red.

As soon as you make a commit, you can open a pull request and start a discussion, even before the code is finished.

By using GitHub’s @mention system in your pull request message, you can ask for feedback from specific people or teams, whether they’re down the hall or 10 time zones away.

You can even open pull requests in your own repository and merge them yourself. It’s a great way to learn the GitHub flow before working on larger projects.

Open a Pull Request for changes to the README
Click on the image for a larger version

Step	Screenshot
Click the  Pull Request tab, then from the Pull Request page, click the green New pull request button.	pr-tab
In the Example Comparisons box, select the branch you made, readme-edits, to compare with master (the original).	branch
Look over your changes in the diffs on the Compare page, make sure they’re what you want to submit.	diff
When you’re satisfied that these are the changes you want to submit, click the big green Create Pull Request button.	create-pull
Give your pull request a title and write a brief description of your changes.	pr-form
When you’re done with your message, click Create pull request!

Tip: You can use emoji and drag and drop images and gifs onto comments and Pull Requests.


Step 5. Merge your Pull Request
In this final step, it’s time to bring your changes together – merging your readme-edits branch into the master branch.

Click the green Merge pull request button to merge the changes into master.
Click Confirm merge.
Go ahead and delete the branch, since its changes have been incorporated, with the Delete branch button in the purple box.
merge delete

Celebrate!
By completing this tutorial, you’ve learned to create a project and make a pull request on GitHub!

Here’s what you accomplished in this tutorial:

Created an open source repository
Started and managed a new branch
Changed a file and committed those changes to GitHub
Opened and merged a Pull Request
Take a look at your GitHub profile and you’ll see your new contribution squares!

To learn more about the power of Pull Requests, we recommend reading the GitHub flow Guide. You might also visit GitHub Explore and get involved in an Open Source project.

Tip: Check out our other Guides, YouTube Channel and On-Demand Training for more on how to get started with GitHub.

Last updated April 7, 2016



Intro
What is GitHub?
Create a Repository
Create a Branch
Make a Commit
Open a Pull Request
Merge Pull Request


GitHub is the best way to build and ship software.
Powerful collaboration, code review, and code management for open source and private projects.





